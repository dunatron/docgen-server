# source: https://us1.prisma.sh/heath-dunlop-37e897/doc_gen_db/dev
# timestamp: Wed Sep 26 2018 16:04:12 GMT+1200 (NZST)

type AggregateDataConfig {
  count: Int!
}

type AggregateDocument {
  count: Int!
}

type AggregateDocumentConfig {
  count: Int!
}

type AggregateOrganisation {
  count: Int!
}

type AggregateSection {
  count: Int!
}

type AggregateTag {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type DataConfig implements Node {
  id: ID!
  organisation: Organisation
  name: String!
  url: String!
  params: Json
}

"""A connection to a list of items."""
type DataConfigConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DataConfigEdge]!
  aggregate: AggregateDataConfig!
}

input DataConfigCreateInput {
  name: String!
  url: String!
  params: Json
  organisation: OrganisationCreateOneWithoutDataConfigsInput
}

input DataConfigCreateManyWithoutOrganisationInput {
  create: [DataConfigCreateWithoutOrganisationInput!]
  connect: [DataConfigWhereUniqueInput!]
}

input DataConfigCreateWithoutOrganisationInput {
  name: String!
  url: String!
  params: Json
}

"""An edge in a connection."""
type DataConfigEdge {
  """The item at the end of the edge."""
  node: DataConfig!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DataConfigOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  url_ASC
  url_DESC
  params_ASC
  params_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type DataConfigPreviousValues {
  id: ID!
  name: String!
  url: String!
  params: Json
}

type DataConfigSubscriptionPayload {
  mutation: MutationType!
  node: DataConfig
  updatedFields: [String!]
  previousValues: DataConfigPreviousValues
}

input DataConfigSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DataConfigSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DataConfigSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DataConfigSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DataConfigWhereInput
}

input DataConfigUpdateInput {
  name: String
  url: String
  params: Json
  organisation: OrganisationUpdateOneWithoutDataConfigsInput
}

input DataConfigUpdateManyWithoutOrganisationInput {
  create: [DataConfigCreateWithoutOrganisationInput!]
  connect: [DataConfigWhereUniqueInput!]
  disconnect: [DataConfigWhereUniqueInput!]
  delete: [DataConfigWhereUniqueInput!]
  update: [DataConfigUpdateWithWhereUniqueWithoutOrganisationInput!]
  upsert: [DataConfigUpsertWithWhereUniqueWithoutOrganisationInput!]
}

input DataConfigUpdateWithoutOrganisationDataInput {
  name: String
  url: String
  params: Json
}

input DataConfigUpdateWithWhereUniqueWithoutOrganisationInput {
  where: DataConfigWhereUniqueInput!
  data: DataConfigUpdateWithoutOrganisationDataInput!
}

input DataConfigUpsertWithWhereUniqueWithoutOrganisationInput {
  where: DataConfigWhereUniqueInput!
  update: DataConfigUpdateWithoutOrganisationDataInput!
  create: DataConfigCreateWithoutOrganisationInput!
}

input DataConfigWhereInput {
  """Logical AND on all given filters."""
  AND: [DataConfigWhereInput!]

  """Logical OR on all given filters."""
  OR: [DataConfigWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DataConfigWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  organisation: OrganisationWhereInput
}

input DataConfigWhereUniqueInput {
  id: ID
}

scalar DateTime

type Document implements Node {
  id: ID!
  createdAt: DateTime!
  name: String
  createdBy: User
  createdFor: Organisation
  config: DocumentConfig
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  sections(where: SectionWhereInput, orderBy: SectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Section!]
  shortCodes: Json
}

type DocumentConfig implements Node {
  id: ID!
  dataUrl: String
  params: Json
  belongsTo: Document!
}

"""A connection to a list of items."""
type DocumentConfigConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DocumentConfigEdge]!
  aggregate: AggregateDocumentConfig!
}

input DocumentConfigCreateInput {
  dataUrl: String
  params: Json
  belongsTo: DocumentCreateOneWithoutConfigInput!
}

input DocumentConfigCreateOneWithoutBelongsToInput {
  create: DocumentConfigCreateWithoutBelongsToInput
  connect: DocumentConfigWhereUniqueInput
}

input DocumentConfigCreateWithoutBelongsToInput {
  dataUrl: String
  params: Json
}

"""An edge in a connection."""
type DocumentConfigEdge {
  """The item at the end of the edge."""
  node: DocumentConfig!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DocumentConfigOrderByInput {
  id_ASC
  id_DESC
  dataUrl_ASC
  dataUrl_DESC
  params_ASC
  params_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type DocumentConfigPreviousValues {
  id: ID!
  dataUrl: String
  params: Json
}

type DocumentConfigSubscriptionPayload {
  mutation: MutationType!
  node: DocumentConfig
  updatedFields: [String!]
  previousValues: DocumentConfigPreviousValues
}

input DocumentConfigSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DocumentConfigSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DocumentConfigSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DocumentConfigSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DocumentConfigWhereInput
}

input DocumentConfigUpdateInput {
  dataUrl: String
  params: Json
  belongsTo: DocumentUpdateOneRequiredWithoutConfigInput
}

input DocumentConfigUpdateOneWithoutBelongsToInput {
  create: DocumentConfigCreateWithoutBelongsToInput
  connect: DocumentConfigWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: DocumentConfigUpdateWithoutBelongsToDataInput
  upsert: DocumentConfigUpsertWithoutBelongsToInput
}

input DocumentConfigUpdateWithoutBelongsToDataInput {
  dataUrl: String
  params: Json
}

input DocumentConfigUpsertWithoutBelongsToInput {
  update: DocumentConfigUpdateWithoutBelongsToDataInput!
  create: DocumentConfigCreateWithoutBelongsToInput!
}

input DocumentConfigWhereInput {
  """Logical AND on all given filters."""
  AND: [DocumentConfigWhereInput!]

  """Logical OR on all given filters."""
  OR: [DocumentConfigWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DocumentConfigWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  dataUrl: String

  """All values that are not equal to given value."""
  dataUrl_not: String

  """All values that are contained in given list."""
  dataUrl_in: [String!]

  """All values that are not contained in given list."""
  dataUrl_not_in: [String!]

  """All values less than the given value."""
  dataUrl_lt: String

  """All values less than or equal the given value."""
  dataUrl_lte: String

  """All values greater than the given value."""
  dataUrl_gt: String

  """All values greater than or equal the given value."""
  dataUrl_gte: String

  """All values containing the given string."""
  dataUrl_contains: String

  """All values not containing the given string."""
  dataUrl_not_contains: String

  """All values starting with the given string."""
  dataUrl_starts_with: String

  """All values not starting with the given string."""
  dataUrl_not_starts_with: String

  """All values ending with the given string."""
  dataUrl_ends_with: String

  """All values not ending with the given string."""
  dataUrl_not_ends_with: String
  belongsTo: DocumentWhereInput
}

input DocumentConfigWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type DocumentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DocumentEdge]!
  aggregate: AggregateDocument!
}

input DocumentCreateInput {
  name: String
  shortCodes: Json
  createdBy: UserCreateOneWithoutDocumentsInput
  createdFor: OrganisationCreateOneWithoutDocumentsInput
  config: DocumentConfigCreateOneWithoutBelongsToInput
  tags: TagCreateManyWithoutDocumentsInput
  sections: SectionCreateManyWithoutBelongsToInput
}

input DocumentCreateManyWithoutCreatedByInput {
  create: [DocumentCreateWithoutCreatedByInput!]
  connect: [DocumentWhereUniqueInput!]
}

input DocumentCreateManyWithoutCreatedForInput {
  create: [DocumentCreateWithoutCreatedForInput!]
  connect: [DocumentWhereUniqueInput!]
}

input DocumentCreateManyWithoutTagsInput {
  create: [DocumentCreateWithoutTagsInput!]
  connect: [DocumentWhereUniqueInput!]
}

input DocumentCreateOneWithoutConfigInput {
  create: DocumentCreateWithoutConfigInput
  connect: DocumentWhereUniqueInput
}

input DocumentCreateOneWithoutSectionsInput {
  create: DocumentCreateWithoutSectionsInput
  connect: DocumentWhereUniqueInput
}

input DocumentCreateWithoutConfigInput {
  name: String
  shortCodes: Json
  createdBy: UserCreateOneWithoutDocumentsInput
  createdFor: OrganisationCreateOneWithoutDocumentsInput
  tags: TagCreateManyWithoutDocumentsInput
  sections: SectionCreateManyWithoutBelongsToInput
}

input DocumentCreateWithoutCreatedByInput {
  name: String
  shortCodes: Json
  createdFor: OrganisationCreateOneWithoutDocumentsInput
  config: DocumentConfigCreateOneWithoutBelongsToInput
  tags: TagCreateManyWithoutDocumentsInput
  sections: SectionCreateManyWithoutBelongsToInput
}

input DocumentCreateWithoutCreatedForInput {
  name: String
  shortCodes: Json
  createdBy: UserCreateOneWithoutDocumentsInput
  config: DocumentConfigCreateOneWithoutBelongsToInput
  tags: TagCreateManyWithoutDocumentsInput
  sections: SectionCreateManyWithoutBelongsToInput
}

input DocumentCreateWithoutSectionsInput {
  name: String
  shortCodes: Json
  createdBy: UserCreateOneWithoutDocumentsInput
  createdFor: OrganisationCreateOneWithoutDocumentsInput
  config: DocumentConfigCreateOneWithoutBelongsToInput
  tags: TagCreateManyWithoutDocumentsInput
}

input DocumentCreateWithoutTagsInput {
  name: String
  shortCodes: Json
  createdBy: UserCreateOneWithoutDocumentsInput
  createdFor: OrganisationCreateOneWithoutDocumentsInput
  config: DocumentConfigCreateOneWithoutBelongsToInput
  sections: SectionCreateManyWithoutBelongsToInput
}

"""An edge in a connection."""
type DocumentEdge {
  """The item at the end of the edge."""
  node: Document!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DocumentOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
  shortCodes_ASC
  shortCodes_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DocumentPreviousValues {
  id: ID!
  createdAt: DateTime!
  name: String
  shortCodes: Json
}

type DocumentSubscriptionPayload {
  mutation: MutationType!
  node: Document
  updatedFields: [String!]
  previousValues: DocumentPreviousValues
}

input DocumentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DocumentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DocumentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DocumentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DocumentWhereInput
}

input DocumentUpdateInput {
  name: String
  shortCodes: Json
  createdBy: UserUpdateOneWithoutDocumentsInput
  createdFor: OrganisationUpdateOneWithoutDocumentsInput
  config: DocumentConfigUpdateOneWithoutBelongsToInput
  tags: TagUpdateManyWithoutDocumentsInput
  sections: SectionUpdateManyWithoutBelongsToInput
}

input DocumentUpdateManyWithoutCreatedByInput {
  create: [DocumentCreateWithoutCreatedByInput!]
  connect: [DocumentWhereUniqueInput!]
  disconnect: [DocumentWhereUniqueInput!]
  delete: [DocumentWhereUniqueInput!]
  update: [DocumentUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [DocumentUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input DocumentUpdateManyWithoutCreatedForInput {
  create: [DocumentCreateWithoutCreatedForInput!]
  connect: [DocumentWhereUniqueInput!]
  disconnect: [DocumentWhereUniqueInput!]
  delete: [DocumentWhereUniqueInput!]
  update: [DocumentUpdateWithWhereUniqueWithoutCreatedForInput!]
  upsert: [DocumentUpsertWithWhereUniqueWithoutCreatedForInput!]
}

input DocumentUpdateManyWithoutTagsInput {
  create: [DocumentCreateWithoutTagsInput!]
  connect: [DocumentWhereUniqueInput!]
  disconnect: [DocumentWhereUniqueInput!]
  delete: [DocumentWhereUniqueInput!]
  update: [DocumentUpdateWithWhereUniqueWithoutTagsInput!]
  upsert: [DocumentUpsertWithWhereUniqueWithoutTagsInput!]
}

input DocumentUpdateOneRequiredWithoutConfigInput {
  create: DocumentCreateWithoutConfigInput
  connect: DocumentWhereUniqueInput
  update: DocumentUpdateWithoutConfigDataInput
  upsert: DocumentUpsertWithoutConfigInput
}

input DocumentUpdateOneWithoutSectionsInput {
  create: DocumentCreateWithoutSectionsInput
  connect: DocumentWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: DocumentUpdateWithoutSectionsDataInput
  upsert: DocumentUpsertWithoutSectionsInput
}

input DocumentUpdateWithoutConfigDataInput {
  name: String
  shortCodes: Json
  createdBy: UserUpdateOneWithoutDocumentsInput
  createdFor: OrganisationUpdateOneWithoutDocumentsInput
  tags: TagUpdateManyWithoutDocumentsInput
  sections: SectionUpdateManyWithoutBelongsToInput
}

input DocumentUpdateWithoutCreatedByDataInput {
  name: String
  shortCodes: Json
  createdFor: OrganisationUpdateOneWithoutDocumentsInput
  config: DocumentConfigUpdateOneWithoutBelongsToInput
  tags: TagUpdateManyWithoutDocumentsInput
  sections: SectionUpdateManyWithoutBelongsToInput
}

input DocumentUpdateWithoutCreatedForDataInput {
  name: String
  shortCodes: Json
  createdBy: UserUpdateOneWithoutDocumentsInput
  config: DocumentConfigUpdateOneWithoutBelongsToInput
  tags: TagUpdateManyWithoutDocumentsInput
  sections: SectionUpdateManyWithoutBelongsToInput
}

input DocumentUpdateWithoutSectionsDataInput {
  name: String
  shortCodes: Json
  createdBy: UserUpdateOneWithoutDocumentsInput
  createdFor: OrganisationUpdateOneWithoutDocumentsInput
  config: DocumentConfigUpdateOneWithoutBelongsToInput
  tags: TagUpdateManyWithoutDocumentsInput
}

input DocumentUpdateWithoutTagsDataInput {
  name: String
  shortCodes: Json
  createdBy: UserUpdateOneWithoutDocumentsInput
  createdFor: OrganisationUpdateOneWithoutDocumentsInput
  config: DocumentConfigUpdateOneWithoutBelongsToInput
  sections: SectionUpdateManyWithoutBelongsToInput
}

input DocumentUpdateWithWhereUniqueWithoutCreatedByInput {
  where: DocumentWhereUniqueInput!
  data: DocumentUpdateWithoutCreatedByDataInput!
}

input DocumentUpdateWithWhereUniqueWithoutCreatedForInput {
  where: DocumentWhereUniqueInput!
  data: DocumentUpdateWithoutCreatedForDataInput!
}

input DocumentUpdateWithWhereUniqueWithoutTagsInput {
  where: DocumentWhereUniqueInput!
  data: DocumentUpdateWithoutTagsDataInput!
}

input DocumentUpsertWithoutConfigInput {
  update: DocumentUpdateWithoutConfigDataInput!
  create: DocumentCreateWithoutConfigInput!
}

input DocumentUpsertWithoutSectionsInput {
  update: DocumentUpdateWithoutSectionsDataInput!
  create: DocumentCreateWithoutSectionsInput!
}

input DocumentUpsertWithWhereUniqueWithoutCreatedByInput {
  where: DocumentWhereUniqueInput!
  update: DocumentUpdateWithoutCreatedByDataInput!
  create: DocumentCreateWithoutCreatedByInput!
}

input DocumentUpsertWithWhereUniqueWithoutCreatedForInput {
  where: DocumentWhereUniqueInput!
  update: DocumentUpdateWithoutCreatedForDataInput!
  create: DocumentCreateWithoutCreatedForInput!
}

input DocumentUpsertWithWhereUniqueWithoutTagsInput {
  where: DocumentWhereUniqueInput!
  update: DocumentUpdateWithoutTagsDataInput!
  create: DocumentCreateWithoutTagsInput!
}

input DocumentWhereInput {
  """Logical AND on all given filters."""
  AND: [DocumentWhereInput!]

  """Logical OR on all given filters."""
  OR: [DocumentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DocumentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdBy: UserWhereInput
  createdFor: OrganisationWhereInput
  config: DocumentConfigWhereInput
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  sections_every: SectionWhereInput
  sections_some: SectionWhereInput
  sections_none: SectionWhereInput
}

input DocumentWhereUniqueInput {
  id: ID
}

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createOrganisation(data: OrganisationCreateInput!): Organisation!
  createDocument(data: DocumentCreateInput!): Document!
  createSection(data: SectionCreateInput!): Section!
  createDocumentConfig(data: DocumentConfigCreateInput!): DocumentConfig!
  createTag(data: TagCreateInput!): Tag!
  createDataConfig(data: DataConfigCreateInput!): DataConfig!
  createUser(data: UserCreateInput!): User!
  updateOrganisation(data: OrganisationUpdateInput!, where: OrganisationWhereUniqueInput!): Organisation
  updateDocument(data: DocumentUpdateInput!, where: DocumentWhereUniqueInput!): Document
  updateSection(data: SectionUpdateInput!, where: SectionWhereUniqueInput!): Section
  updateDocumentConfig(data: DocumentConfigUpdateInput!, where: DocumentConfigWhereUniqueInput!): DocumentConfig
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateDataConfig(data: DataConfigUpdateInput!, where: DataConfigWhereUniqueInput!): DataConfig
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteOrganisation(where: OrganisationWhereUniqueInput!): Organisation
  deleteDocument(where: DocumentWhereUniqueInput!): Document
  deleteSection(where: SectionWhereUniqueInput!): Section
  deleteDocumentConfig(where: DocumentConfigWhereUniqueInput!): DocumentConfig
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteDataConfig(where: DataConfigWhereUniqueInput!): DataConfig
  deleteUser(where: UserWhereUniqueInput!): User
  upsertOrganisation(where: OrganisationWhereUniqueInput!, create: OrganisationCreateInput!, update: OrganisationUpdateInput!): Organisation!
  upsertDocument(where: DocumentWhereUniqueInput!, create: DocumentCreateInput!, update: DocumentUpdateInput!): Document!
  upsertSection(where: SectionWhereUniqueInput!, create: SectionCreateInput!, update: SectionUpdateInput!): Section!
  upsertDocumentConfig(where: DocumentConfigWhereUniqueInput!, create: DocumentConfigCreateInput!, update: DocumentConfigUpdateInput!): DocumentConfig!
  upsertTag(where: TagWhereUniqueInput!, create: TagCreateInput!, update: TagUpdateInput!): Tag!
  upsertDataConfig(where: DataConfigWhereUniqueInput!, create: DataConfigCreateInput!, update: DataConfigUpdateInput!): DataConfig!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyOrganisations(data: OrganisationUpdateInput!, where: OrganisationWhereInput): BatchPayload!
  updateManyDocuments(data: DocumentUpdateInput!, where: DocumentWhereInput): BatchPayload!
  updateManySections(data: SectionUpdateInput!, where: SectionWhereInput): BatchPayload!
  updateManyDocumentConfigs(data: DocumentConfigUpdateInput!, where: DocumentConfigWhereInput): BatchPayload!
  updateManyTags(data: TagUpdateInput!, where: TagWhereInput): BatchPayload!
  updateManyDataConfigs(data: DataConfigUpdateInput!, where: DataConfigWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  deleteManyOrganisations(where: OrganisationWhereInput): BatchPayload!
  deleteManyDocuments(where: DocumentWhereInput): BatchPayload!
  deleteManySections(where: SectionWhereInput): BatchPayload!
  deleteManyDocumentConfigs(where: DocumentConfigWhereInput): BatchPayload!
  deleteManyTags(where: TagWhereInput): BatchPayload!
  deleteManyDataConfigs(where: DataConfigWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Organisation implements Node {
  id: ID!
  name: String
  documents(where: DocumentWhereInput, orderBy: DocumentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Document!]
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  dataConfigs(where: DataConfigWhereInput, orderBy: DataConfigOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DataConfig!]
}

"""A connection to a list of items."""
type OrganisationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrganisationEdge]!
  aggregate: AggregateOrganisation!
}

input OrganisationCreateInput {
  name: String
  documents: DocumentCreateManyWithoutCreatedForInput
  users: UserCreateManyWithoutOrganisationsInput
  dataConfigs: DataConfigCreateManyWithoutOrganisationInput
}

input OrganisationCreateManyWithoutUsersInput {
  create: [OrganisationCreateWithoutUsersInput!]
  connect: [OrganisationWhereUniqueInput!]
}

input OrganisationCreateOneWithoutDataConfigsInput {
  create: OrganisationCreateWithoutDataConfigsInput
  connect: OrganisationWhereUniqueInput
}

input OrganisationCreateOneWithoutDocumentsInput {
  create: OrganisationCreateWithoutDocumentsInput
  connect: OrganisationWhereUniqueInput
}

input OrganisationCreateWithoutDataConfigsInput {
  name: String
  documents: DocumentCreateManyWithoutCreatedForInput
  users: UserCreateManyWithoutOrganisationsInput
}

input OrganisationCreateWithoutDocumentsInput {
  name: String
  users: UserCreateManyWithoutOrganisationsInput
  dataConfigs: DataConfigCreateManyWithoutOrganisationInput
}

input OrganisationCreateWithoutUsersInput {
  name: String
  documents: DocumentCreateManyWithoutCreatedForInput
  dataConfigs: DataConfigCreateManyWithoutOrganisationInput
}

"""An edge in a connection."""
type OrganisationEdge {
  """The item at the end of the edge."""
  node: Organisation!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OrganisationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type OrganisationPreviousValues {
  id: ID!
  name: String
}

type OrganisationSubscriptionPayload {
  mutation: MutationType!
  node: Organisation
  updatedFields: [String!]
  previousValues: OrganisationPreviousValues
}

input OrganisationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OrganisationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrganisationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrganisationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrganisationWhereInput
}

input OrganisationUpdateInput {
  name: String
  documents: DocumentUpdateManyWithoutCreatedForInput
  users: UserUpdateManyWithoutOrganisationsInput
  dataConfigs: DataConfigUpdateManyWithoutOrganisationInput
}

input OrganisationUpdateManyWithoutUsersInput {
  create: [OrganisationCreateWithoutUsersInput!]
  connect: [OrganisationWhereUniqueInput!]
  disconnect: [OrganisationWhereUniqueInput!]
  delete: [OrganisationWhereUniqueInput!]
  update: [OrganisationUpdateWithWhereUniqueWithoutUsersInput!]
  upsert: [OrganisationUpsertWithWhereUniqueWithoutUsersInput!]
}

input OrganisationUpdateOneWithoutDataConfigsInput {
  create: OrganisationCreateWithoutDataConfigsInput
  connect: OrganisationWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OrganisationUpdateWithoutDataConfigsDataInput
  upsert: OrganisationUpsertWithoutDataConfigsInput
}

input OrganisationUpdateOneWithoutDocumentsInput {
  create: OrganisationCreateWithoutDocumentsInput
  connect: OrganisationWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OrganisationUpdateWithoutDocumentsDataInput
  upsert: OrganisationUpsertWithoutDocumentsInput
}

input OrganisationUpdateWithoutDataConfigsDataInput {
  name: String
  documents: DocumentUpdateManyWithoutCreatedForInput
  users: UserUpdateManyWithoutOrganisationsInput
}

input OrganisationUpdateWithoutDocumentsDataInput {
  name: String
  users: UserUpdateManyWithoutOrganisationsInput
  dataConfigs: DataConfigUpdateManyWithoutOrganisationInput
}

input OrganisationUpdateWithoutUsersDataInput {
  name: String
  documents: DocumentUpdateManyWithoutCreatedForInput
  dataConfigs: DataConfigUpdateManyWithoutOrganisationInput
}

input OrganisationUpdateWithWhereUniqueWithoutUsersInput {
  where: OrganisationWhereUniqueInput!
  data: OrganisationUpdateWithoutUsersDataInput!
}

input OrganisationUpsertWithoutDataConfigsInput {
  update: OrganisationUpdateWithoutDataConfigsDataInput!
  create: OrganisationCreateWithoutDataConfigsInput!
}

input OrganisationUpsertWithoutDocumentsInput {
  update: OrganisationUpdateWithoutDocumentsDataInput!
  create: OrganisationCreateWithoutDocumentsInput!
}

input OrganisationUpsertWithWhereUniqueWithoutUsersInput {
  where: OrganisationWhereUniqueInput!
  update: OrganisationUpdateWithoutUsersDataInput!
  create: OrganisationCreateWithoutUsersInput!
}

input OrganisationWhereInput {
  """Logical AND on all given filters."""
  AND: [OrganisationWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrganisationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrganisationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  documents_every: DocumentWhereInput
  documents_some: DocumentWhereInput
  documents_none: DocumentWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  dataConfigs_every: DataConfigWhereInput
  dataConfigs_some: DataConfigWhereInput
  dataConfigs_none: DataConfigWhereInput
}

input OrganisationWhereUniqueInput {
  id: ID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  organisations(where: OrganisationWhereInput, orderBy: OrganisationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Organisation]!
  documents(where: DocumentWhereInput, orderBy: DocumentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Document]!
  sections(where: SectionWhereInput, orderBy: SectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Section]!
  documentConfigs(where: DocumentConfigWhereInput, orderBy: DocumentConfigOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DocumentConfig]!
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag]!
  dataConfigs(where: DataConfigWhereInput, orderBy: DataConfigOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DataConfig]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  organisation(where: OrganisationWhereUniqueInput!): Organisation
  document(where: DocumentWhereUniqueInput!): Document
  section(where: SectionWhereUniqueInput!): Section
  documentConfig(where: DocumentConfigWhereUniqueInput!): DocumentConfig
  tag(where: TagWhereUniqueInput!): Tag
  dataConfig(where: DataConfigWhereUniqueInput!): DataConfig
  user(where: UserWhereUniqueInput!): User
  organisationsConnection(where: OrganisationWhereInput, orderBy: OrganisationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrganisationConnection!
  documentsConnection(where: DocumentWhereInput, orderBy: DocumentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DocumentConnection!
  sectionsConnection(where: SectionWhereInput, orderBy: SectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SectionConnection!
  documentConfigsConnection(where: DocumentConfigWhereInput, orderBy: DocumentConfigOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DocumentConfigConnection!
  tagsConnection(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TagConnection!
  dataConfigsConnection(where: DataConfigWhereInput, orderBy: DataConfigOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DataConfigConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

enum ROLE {
  USER
  ADMIN
  WIZARD
}

type Section implements Node {
  id: ID!
  createdAt: DateTime!
  createdBy: User
  belongsTo: Document
  type: String
  rawContent: Json
  position: Int
}

"""A connection to a list of items."""
type SectionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SectionEdge]!
  aggregate: AggregateSection!
}

input SectionCreateInput {
  type: String
  rawContent: Json
  position: Int
  createdBy: UserCreateOneInput
  belongsTo: DocumentCreateOneWithoutSectionsInput
}

input SectionCreateManyWithoutBelongsToInput {
  create: [SectionCreateWithoutBelongsToInput!]
  connect: [SectionWhereUniqueInput!]
}

input SectionCreateWithoutBelongsToInput {
  type: String
  rawContent: Json
  position: Int
  createdBy: UserCreateOneInput
}

"""An edge in a connection."""
type SectionEdge {
  """The item at the end of the edge."""
  node: Section!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SectionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  type_ASC
  type_DESC
  rawContent_ASC
  rawContent_DESC
  position_ASC
  position_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SectionPreviousValues {
  id: ID!
  createdAt: DateTime!
  type: String
  rawContent: Json
  position: Int
}

type SectionSubscriptionPayload {
  mutation: MutationType!
  node: Section
  updatedFields: [String!]
  previousValues: SectionPreviousValues
}

input SectionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SectionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SectionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SectionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SectionWhereInput
}

input SectionUpdateInput {
  type: String
  rawContent: Json
  position: Int
  createdBy: UserUpdateOneInput
  belongsTo: DocumentUpdateOneWithoutSectionsInput
}

input SectionUpdateManyWithoutBelongsToInput {
  create: [SectionCreateWithoutBelongsToInput!]
  connect: [SectionWhereUniqueInput!]
  disconnect: [SectionWhereUniqueInput!]
  delete: [SectionWhereUniqueInput!]
  update: [SectionUpdateWithWhereUniqueWithoutBelongsToInput!]
  upsert: [SectionUpsertWithWhereUniqueWithoutBelongsToInput!]
}

input SectionUpdateWithoutBelongsToDataInput {
  type: String
  rawContent: Json
  position: Int
  createdBy: UserUpdateOneInput
}

input SectionUpdateWithWhereUniqueWithoutBelongsToInput {
  where: SectionWhereUniqueInput!
  data: SectionUpdateWithoutBelongsToDataInput!
}

input SectionUpsertWithWhereUniqueWithoutBelongsToInput {
  where: SectionWhereUniqueInput!
  update: SectionUpdateWithoutBelongsToDataInput!
  create: SectionCreateWithoutBelongsToInput!
}

input SectionWhereInput {
  """Logical AND on all given filters."""
  AND: [SectionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SectionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SectionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  position: Int

  """All values that are not equal to given value."""
  position_not: Int

  """All values that are contained in given list."""
  position_in: [Int!]

  """All values that are not contained in given list."""
  position_not_in: [Int!]

  """All values less than the given value."""
  position_lt: Int

  """All values less than or equal the given value."""
  position_lte: Int

  """All values greater than the given value."""
  position_gt: Int

  """All values greater than or equal the given value."""
  position_gte: Int
  createdBy: UserWhereInput
  belongsTo: DocumentWhereInput
}

input SectionWhereUniqueInput {
  id: ID
}

type Subscription {
  organisation(where: OrganisationSubscriptionWhereInput): OrganisationSubscriptionPayload
  document(where: DocumentSubscriptionWhereInput): DocumentSubscriptionPayload
  section(where: SectionSubscriptionWhereInput): SectionSubscriptionPayload
  documentConfig(where: DocumentConfigSubscriptionWhereInput): DocumentConfigSubscriptionPayload
  tag(where: TagSubscriptionWhereInput): TagSubscriptionPayload
  dataConfig(where: DataConfigSubscriptionWhereInput): DataConfigSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Tag implements Node {
  id: ID!
  name: String!
  documents(where: DocumentWhereInput, orderBy: DocumentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Document!]
}

"""A connection to a list of items."""
type TagConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TagEdge]!
  aggregate: AggregateTag!
}

input TagCreateInput {
  name: String!
  documents: DocumentCreateManyWithoutTagsInput
}

input TagCreateManyWithoutDocumentsInput {
  create: [TagCreateWithoutDocumentsInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreateWithoutDocumentsInput {
  name: String!
}

"""An edge in a connection."""
type TagEdge {
  """The item at the end of the edge."""
  node: Tag!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TagOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TagPreviousValues {
  id: ID!
  name: String!
}

type TagSubscriptionPayload {
  mutation: MutationType!
  node: Tag
  updatedFields: [String!]
  previousValues: TagPreviousValues
}

input TagSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TagSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TagSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TagSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TagWhereInput
}

input TagUpdateInput {
  name: String
  documents: DocumentUpdateManyWithoutTagsInput
}

input TagUpdateManyWithoutDocumentsInput {
  create: [TagCreateWithoutDocumentsInput!]
  connect: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  delete: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutDocumentsInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutDocumentsInput!]
}

input TagUpdateWithoutDocumentsDataInput {
  name: String
}

input TagUpdateWithWhereUniqueWithoutDocumentsInput {
  where: TagWhereUniqueInput!
  data: TagUpdateWithoutDocumentsDataInput!
}

input TagUpsertWithWhereUniqueWithoutDocumentsInput {
  where: TagWhereUniqueInput!
  update: TagUpdateWithoutDocumentsDataInput!
  create: TagCreateWithoutDocumentsInput!
}

input TagWhereInput {
  """Logical AND on all given filters."""
  AND: [TagWhereInput!]

  """Logical OR on all given filters."""
  OR: [TagWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TagWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  documents_every: DocumentWhereInput
  documents_some: DocumentWhereInput
  documents_none: DocumentWhereInput
}

input TagWhereUniqueInput {
  id: ID
  name: String
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  documents(where: DocumentWhereInput, orderBy: DocumentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Document!]
  organisations(where: OrganisationWhereInput, orderBy: OrganisationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Organisation!]
  role: ROLE!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
  role: ROLE
  documents: DocumentCreateManyWithoutCreatedByInput
  organisations: OrganisationCreateManyWithoutUsersInput
}

input UserCreateManyWithoutOrganisationsInput {
  create: [UserCreateWithoutOrganisationsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutDocumentsInput {
  create: UserCreateWithoutDocumentsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutDocumentsInput {
  name: String!
  email: String!
  password: String!
  role: ROLE
  organisations: OrganisationCreateManyWithoutUsersInput
}

input UserCreateWithoutOrganisationsInput {
  name: String!
  email: String!
  password: String!
  role: ROLE
  documents: DocumentCreateManyWithoutCreatedByInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  role_ASC
  role_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  role: ROLE!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  name: String
  email: String
  password: String
  role: ROLE
  documents: DocumentUpdateManyWithoutCreatedByInput
  organisations: OrganisationUpdateManyWithoutUsersInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: ROLE
  documents: DocumentUpdateManyWithoutCreatedByInput
  organisations: OrganisationUpdateManyWithoutUsersInput
}

input UserUpdateManyWithoutOrganisationsInput {
  create: [UserCreateWithoutOrganisationsInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutOrganisationsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutOrganisationsInput!]
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneWithoutDocumentsInput {
  create: UserCreateWithoutDocumentsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutDocumentsDataInput
  upsert: UserUpsertWithoutDocumentsInput
}

input UserUpdateWithoutDocumentsDataInput {
  name: String
  email: String
  password: String
  role: ROLE
  organisations: OrganisationUpdateManyWithoutUsersInput
}

input UserUpdateWithoutOrganisationsDataInput {
  name: String
  email: String
  password: String
  role: ROLE
  documents: DocumentUpdateManyWithoutCreatedByInput
}

input UserUpdateWithWhereUniqueWithoutOrganisationsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutOrganisationsDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutDocumentsInput {
  update: UserUpdateWithoutDocumentsDataInput!
  create: UserCreateWithoutDocumentsInput!
}

input UserUpsertWithWhereUniqueWithoutOrganisationsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutOrganisationsDataInput!
  create: UserCreateWithoutOrganisationsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  role: ROLE

  """All values that are not equal to given value."""
  role_not: ROLE

  """All values that are contained in given list."""
  role_in: [ROLE!]

  """All values that are not contained in given list."""
  role_not_in: [ROLE!]
  documents_every: DocumentWhereInput
  documents_some: DocumentWhereInput
  documents_none: DocumentWhereInput
  organisations_every: OrganisationWhereInput
  organisations_some: OrganisationWhereInput
  organisations_none: OrganisationWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
